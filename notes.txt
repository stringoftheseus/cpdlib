Random Notes

Need to improve the way we load load config files. Currently, we just try to require them, and if
it doesn't work we die. A better idea would be something like

if(file_exists("cpdsql.conf.php"))
{
	require_once "cpdsql.conf.php";
} 
else if(file_exists("../cpdsql.conf.php"))
{
	require_once "../cpdsql.conf.php";
}
else
{
	require_once "cpdsql-default.conf.php";
}

so that we default to the default config file if we can't find any other.

This is actually the exact type of thing I'd should put in cpdcore.inc.php as a core function that
all cpdlib modules can load and use...

====================================================================================================

CPDinstall. 

How much of Lego could I export and use as a generic CPDLib module or modules? Would it be of any use
to anyone else? Maybe pull the console stuff out into CPDConsole and see what other stuff might make
a good module later?

====================================================================================================
Since the LGPL is really pointless for web-based stuff, I should use the AGPL, but I still want the
L stuff. So what I need is the ALGPL, which as far as I can tell, doens't actually exist. Maybe I'll
have to make it up, or find some other license.


====================================================================================================
CPD Console

I'm thinking about taking the printing functions from Lego and turning them into a CPD Module, and
calling it like "CPD Console". They're only really worth anything when you're building an install
script or some other web app that prints out lots of status information line by line to the screen,
which I've only done with Lego and might never do again, but it's been very useful for that and so
maybe it's something some other people might enjoy having...

====================================================================================================
CPD SQL Split

So I'm thinking about splitting the CPD SQL module into two pieces: the query module, and the update
module. That way we can copy the idea of the different types of query selectors, and use that with
(at the minimum) UPDATE and DELETE, so we can do cpdsql_delete_where, or cpdsql_update_id. I think
these would be really useful to have (and would probably use them in WAVE) but I'm so sick of cpdlib
right now that I really want to put it off for a bit. Maybe next week, or after I get going using 
the 2.0 library for a while.

Also, if we do this, I'm thinking about splitting up some of the different modules into different
folders, so we'd have a cpdsql folder with all the cpdsql stuff in it. I figure we can put the main
cpdsql.inc.php file in the root fo the cpdlib folder, and then have it include the other files in
the cpdsql folder, just so things stay more organized. We already have 3 cpdsql files, and if we
split this up we'll have 5, plus another one for each new driver file (of which there might be like
4 or 5 total eventually).

====================================================================================================
CPDSQL Errors

So I want to print useful error messages in cpdsql. One of the things I want to do is use the PHP
function debug_backtrace to get the file and line number of the person who first called into CPDLib,
and the file and line number of where the error occurred. I figure this would be really useful, and
maybe something that should be in a general CPDLib Utilities file so that any of the modules in the
CPD Library can use it. Of course, we don't currently have a CPDLib Utilities file, but we might
want one eventually, especially if we start getting more CPD Library modules in the future. So that
is definitely something to think about and maybe implement soon.


====================================================================================================
CPD Event

When working on cpdsql's logging and error reporting stuff, I got a little carried away with the 
config options available and wrote the docs such as to imply that there was almost an entire system
inside cpdsql to propogate events and handle them and all that. I might tone that down a little bit,
but I started thinking about whether a cpdevent (or cpdedp, or cpdnotice) module would be a good 
idea.

In a client side environment, we have javascript events to help us out, and now jQuery custom 
events to make it all even easier. Now, of course most of those events happen in response to user
actions, which don't exist on the server side of things, but there still might be some use for a 
decent event management system, if only for dealing with errors and debug logging in an application.

So I'm thinking about adding that as a third cpdlib module, but I can't decide if it would be useful
or if I'm just getting carried away.

If I did it, it would probably look something like this:

Events: triggered by the code itself, via calling cpdevent_trigger('myEvent');

Handlers: handle a specific event or a set of them. Connect via cpdevent_bind('myEvent', 'myHandler');

Actions: added to handlers (or directly to events, creating implicit handlers) with a function call
or conf setting: cpdevent_add_action('myHandler', 'function', 'myFunc');
                 cpdevent_add_action('myHandler', 'cpdlog', 'my_event_log');
                 cpdevent_add_action('myHandler', 'file', 'my_event_log.txt');
                 cpdevent_add_action('myHandler', 'print');
                 cpdevent_add_action('myHandler', 'exit');

See cpdsql.conf.php from Jun 22nd at 5pm for an example of how this might be sort of be used in
other cpdlib modules.
====================================================================================================